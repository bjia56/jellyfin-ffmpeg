Index: FFmpeg/configure
===================================================================
--- FFmpeg.orig/configure
+++ FFmpeg/configure
@@ -7195,8 +7195,23 @@ check_optflags -fno-signed-zeros
 
 if enabled lto; then
     test "$cc_type" != "$ld_type" && die "LTO requires same compiler and linker"
-    check_cflags  -flto
-    check_ldflags -flto $cpuflags
+    if test "$cc_type" = "clang"; then
+        check_cflags  -flto=thin
+        check_ldflags -flto=thin $cpuflags
+        # Clang's LTO fails on Windows, when there are references outside
+        # of inline assembly to nonlocal labels defined within inline assembly,
+        # see https://github.com/llvm/llvm-project/issues/76046.
+        case $target_os in
+        mingw*|win*)
+            disable inline_asm_nonlocal_labels
+            ;;
+        esac
+    else
+        check_cflags  -flto
+        check_ldflags -flto $cpuflags
+        check_cflags  -flto=auto
+        check_ldflags -flto=auto $cpuflags
+    fi
     disable inline_asm_direct_symbol_refs
 fi
 
@@ -7235,7 +7250,9 @@ if enabled icc; then
             disable aligned_stack
     fi
 elif enabled gcc; then
-    check_optflags -fno-tree-vectorize
+    case $gcc_basever in
+        2|2.*|3.*|4.*|5.*|6.*) check_optflags -fno-tree-vectorize ;;
+    esac
     check_cflags -Werror=format-security
     check_cflags -Werror=implicit-function-declaration
     check_cflags -Werror=missing-prototypes
Index: FFmpeg/libavcodec/x86/cabac.h
===================================================================
--- FFmpeg.orig/libavcodec/x86/cabac.h
+++ FFmpeg/libavcodec/x86/cabac.h
@@ -183,6 +183,9 @@ av_noinline
 #else
 av_always_inline
 #endif
+#ifdef __GNUC__
+__attribute__((optimize("-fno-tree-vectorize")))
+#endif
 int get_cabac_inline_x86(CABACContext *c, uint8_t *const state)
 {
     int bit, tmp;
